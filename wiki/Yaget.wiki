#summary Bits and pieces about yaget technology

= Introduction =
There are several [http://code.google.com/p/yaget/wiki/Packages Packages] used by yaget projects. Each package list what property sheet needs for proper usage in a project.

=== [CodeSamples Code Samples] ===


=== Property Sheets ===
Property sheets are located at $(YAGET_ROOT_FOLDER)\branch\$(YAGET_BRANCH_FOLDER)\!BuildRules. 
* Order and Description
** Debug and Release (required)
*** Adjust user macro, this should point to the root of your project and is shared among branches.
**** *YAGET_ROOT_FOLDER* (c:\development\Yaget)
*** Additional macros are:
**** *YAGET_DEBUG_SUFFIX* and *PACKAGE_DEBUG_SUFFIX*
** Branch (required)
*** Adjust user macro, this should contain name of your branch and its always unique to a branch you work in. It also should not be branched.
**** *YAGET_BRANCH_FOLDER* (main)
** Library (required)
*** This is manipulated by Yaget Build Environment Visual Studio 2008 plugin, where it sets the *YAGET_ROOT_FOLDER* user macro. For this to work properly, this property sheet must be set always for write.
*** It sets !OutputDirectory and !IntermediateDirectory.
** boost_Use
*** If you included any *!Math_Use* or *!Math_Link* property sheet, then boost_Use was also included.
** Project Properties for *Configuration Properties/General*:
*** *Output Directory* and *Intermediate Directory* needs to be set to inherit.

=== Solution Items ===
  For each solution add *New Solution Folder* and add new file $(!SolutionName).slnenv with this content:

{{{
; unit test output
YAGET_RUN_FOLDER=$(YAGET_ROOT_FOLDER)\branch\$(YAGET_BRANCH_FOLDER)\bin\UT_$(ConfigurationName)\
}}}

replace UT with your your app name. This file is read at solution load by Yaget Build Environment Visual Studio 2008 plugin and sets user macro YAGET_ROOT_FOLDER in Library property sheet.

==Debug CRT==
If you use
Code:
{{{
#ifdef _DEBUG
   #define DEBUG_CLIENTBLOCK   new( _CLIENT_BLOCK, __FILE__, __LINE__)
#else
   #define DEBUG_CLIENTBLOCK
#endif
}}}
in your 'general header include' and
Code:
{{{
#ifdef _DEBUG
  #define new DEBUG_CLIENTBLOCK
#endif
}}}
in all your ccp-files

In the code I use this I also do
Code:
{{{
#if defined(_DEBUG)
  int tmpFlag = _CrtSetDbgFlag( _CRTDBG_REPORT_FLAG );
  tmpFlag    |= _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF;  // Check heap alloc and dump mem leaks at exit
  _CrtSetDbgFlag( tmpFlag );
  //_crtBreakAlloc = 58652; // in case something very bad happens
  assert( !errno );
#endif
}}}
as the very first thing in main 
