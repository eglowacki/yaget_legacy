// p:\Yaget\branch\main\Common\Network\Connectors\include\ClientConnectorObject.cpp - generated by OIDL Sat Dec 27 04:13:08 2008


#include "ClientConnectorObject.h"
namespace eg {

}

namespace eg {

}

namespace eg {

}


namespace eg {

void ClientConnectorObjectBase::HandleOpen(omega::Object::ConnectionID connection)
{
  bool handled = false;
  if (strcmp(GetDestinationSupportedInterfaces(connection), "*") &&
      IsDestinationSupportedInterface(connection, "(ISimulatorObserverRequest)"))
  {
    ISimulatorObserverRequestProxy r(connection);

    IF_DEBUG(CheckProtocolVersion("(ISimulatorObserverRequest)", r.GetInterfaceVersion());)
    HandleOpen(r);
    handled = true;
  }
  if (strcmp(GetDestinationSupportedInterfaces(connection), "*") &&
      IsDestinationSupportedInterface(connection, "(IReplicateRequest)"))
  {
    IReplicateRequestProxy r(connection);

    IF_DEBUG(CheckProtocolVersion("(IReplicateRequest)", r.GetInterfaceVersion());)
    HandleOpen(r);
    handled = true;
  }
  if (!handled)
  {
    HandleConnectionUnhandled(connection);
  }
}

void ClientConnectorObjectBase::HandleClose(omega::Object::ConnectionID connection)
{
  if (strcmp(GetDestinationSupportedInterfaces(connection), "*") &&
      IsDestinationSupportedInterface(connection, "(ISimulatorObserverRequest)"))
  {
    ISimulatorObserverRequestProxy r(connection);
    HandleClose(r);
  }
  if (strcmp(GetDestinationSupportedInterfaces(connection), "*") &&
      IsDestinationSupportedInterface(connection, "(IReplicateRequest)"))
  {
    IReplicateRequestProxy r(connection);
    HandleClose(r);
  }
}

void ClientConnectorObjectBase::HandleConnectFailure(omega::Object::ConnectionID /*connection*/)
{
}

void ClientConnectorObjectBase::HandlePDU(omega::Object::ConnectionID connection, omega::uint32 signature, omega::Object::ObjectID from, omega::Socket::SocketType code, omega::Frame& dataFrame)
{
  if (signature == 0x7a47f0d)
  {
    omega::uint64 objectId;
    try
    {
      dataFrame >> objectId;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Add", err);
      return;
    }
    ISimulatorObserverRequestProxy r(connection);
    Add (r,  objectId);
    return;
  }
  if (signature == 0xfc6e65a0)
  {
    omega::uint64 objectId;
    omega::OString streamName;
    try
    {
      dataFrame >> objectId;
      dataFrame >> streamName;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Add", err);
      return;
    }
    ISimulatorObserverRequestProxy r(connection);
    Add (r,  objectId, streamName);
    return;
  }
  if (signature == 0xc02c2735)
  {
    omega::uint64 objectId;
    omega::Frame frame;
    try
    {
      dataFrame >> objectId;
      dataFrame >> frame;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Add", err);
      return;
    }
    ISimulatorObserverRequestProxy r(connection);
    Add (r,  objectId, frame);
    return;
  }
  if (signature == 0x3cf56655)
  {
    omega::uint64 objectId;
    try
    {
      dataFrame >> objectId;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Remove", err);
      return;
    }
    ISimulatorObserverRequestProxy r(connection);
    Remove (r,  objectId);
    return;
  }
  if (signature == 0x19afef56)
  {
    omega::uint64 observerId;
    try
    {
      dataFrame >> observerId;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "ObserverId", err);
      return;
    }
    ISimulatorObserverRequestProxy r(connection);
    ObserverId (r,  observerId);
    return;
  }
  if (signature == 0xfe6c9474)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    bool value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0x82298879)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    omega::float32 value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0x6698627e)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    omega::int32 value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0xaa8963c2)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    omega::uint32 value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0x6b13e085)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    eg::Vector2 value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0x6b13e185)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    eg::Vector3 value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0x6b13e285)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    eg::Vector4 value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  if (signature == 0x5c64f8bf)
  {
    omega::uint64 oId;
    omega::uint32 cId;
    omega::OString propName;
    omega::OString value;
    try
    {
      dataFrame >> oId;
      dataFrame >> cId;
      dataFrame >> propName;
      dataFrame >> value;
    }
    catch (const omega::OString& err)
    {
      HandleDecodeException(connection, "Replicate", err);
      return;
    }
    IReplicateRequestProxy r(connection);
    Replicate (r,  oId, cId, propName, value);
    return;
  }
  HandleUnrecognizedPDU(GetDestinationFullName(connection), signature, from, code, dataFrame);
}

void ClientConnectorObjectBase::HandleOpen(ISimulatorObserverRequestProxy & /* ref */)
{
}

void ClientConnectorObjectBase::HandleClose(ISimulatorObserverRequestProxy & /* ref */)
{
}

void ClientConnectorObjectBase::HandleOpen(IReplicateRequestProxy & /* ref */)
{
}

void ClientConnectorObjectBase::HandleClose(IReplicateRequestProxy & /* ref */)
{
}


}
