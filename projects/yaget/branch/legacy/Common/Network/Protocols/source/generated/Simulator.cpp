// p:\Yaget\branch\main\Common\Network\Protocols\include\Simulator.cpp - generated by OIDL Sat Dec 27 04:09:19 2008


#include "Simulator.h"
ISimulatorObserverRequestProxy::ISimulatorObserverRequestProxy(omega::Object::ConnectionID c) : ObjectProxy(c), m_Direct(0), m_Reply(0)
{
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorObserverRequest *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorObserverReply *> (GetOwnerObject());

    }
};

void ISimulatorObserverRequestProxy::SetConnection(omega::Object::ConnectionID c)
{
  ObjectProxy::SetConnection(c);
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorObserverRequest *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorObserverReply *> (GetOwnerObject());

    }
};

void ISimulatorObserverRequestProxy::SetObserverInfo (
	omega::float32 radius)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorObserverReplyProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->SetObserverInfo(reply, radius);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0x1b3e33b8);
  dataFrame << radius;
  ObjectProxy::SendMessage(stream);
}

ISimulatorObserverReplyProxy::ISimulatorObserverReplyProxy(omega::Object::ConnectionID c) : ObjectProxy(c), m_Direct(0), m_Reply(0)
{
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorObserverReply *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorObserverRequest *> (GetOwnerObject());

    }
};

void ISimulatorObserverReplyProxy::SetConnection(omega::Object::ConnectionID c)
{
  ObjectProxy::SetConnection(c);
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorObserverReply *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorObserverRequest *> (GetOwnerObject());

    }
};

void ISimulatorObserverReplyProxy::Add (
	omega::uint64 objectId)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorObserverRequestProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->Add(reply, objectId);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0x7a47f0d);
  dataFrame << objectId;
  ObjectProxy::SendMessage(stream);
}

void ISimulatorObserverReplyProxy::Add (
	omega::uint64 objectId,
	const omega::OString& streamName)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorObserverRequestProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->Add(reply, objectId, streamName);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0xfc6e65a0);
  dataFrame << objectId;
  dataFrame << streamName;
  ObjectProxy::SendMessage(stream);
}

void ISimulatorObserverReplyProxy::Add (
	omega::uint64 objectId,
	const omega::Frame& frame)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorObserverRequestProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->Add(reply, objectId, frame);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0xc02c2735);
  dataFrame << objectId;
  dataFrame << frame;
  ObjectProxy::SendMessage(stream);
}

void ISimulatorObserverReplyProxy::Remove (
	omega::uint64 objectId)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorObserverRequestProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->Remove(reply, objectId);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0x3cf56655);
  dataFrame << objectId;
  ObjectProxy::SendMessage(stream);
}

void ISimulatorObserverReplyProxy::ObserverId (
	omega::uint64 observerId)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorObserverRequestProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->ObserverId(reply, observerId);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0x19afef56);
  dataFrame << observerId;
  ObjectProxy::SendMessage(stream);
}

ISimulatorRequestProxy::ISimulatorRequestProxy(omega::Object::ConnectionID c) : ObjectProxy(c), m_Direct(0), m_Reply(0)
{
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorRequest *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorReply *> (GetOwnerObject());

    }
};

void ISimulatorRequestProxy::SetConnection(omega::Object::ConnectionID c)
{
  ObjectProxy::SetConnection(c);
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorRequest *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorReply *> (GetOwnerObject());

    }
};

void ISimulatorRequestProxy::Add (
	omega::uint64 objectId)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorReplyProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->Add(reply, objectId);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0x1716f091);
  dataFrame << objectId;
  ObjectProxy::SendMessage(stream);
}

void ISimulatorRequestProxy::Remove (
	omega::uint64 objectId)
{
  if (!IsValid()) return;

  if (m_Direct)
    {
    ISimulatorReplyProxy reply(m_connection, m_Reply, m_Direct);
    m_Direct->Remove(reply, objectId);
    return;
  }

  omega::PDUOStream stream;
  omega::Frame& dataFrame = ObjectProxy::PrepareMessage(stream, 0x50e8fde5);
  dataFrame << objectId;
  ObjectProxy::SendMessage(stream);
}

ISimulatorReplyProxy::ISimulatorReplyProxy(omega::Object::ConnectionID c) : ObjectProxy(c), m_Direct(0), m_Reply(0)
{
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorReply *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorRequest *> (GetOwnerObject());

    }
};

void ISimulatorReplyProxy::SetConnection(omega::Object::ConnectionID c)
{
  ObjectProxy::SetConnection(c);
  if (IsLocal())
    {
      m_Direct = dynamic_cast<ISimulatorReply *> (GetDestinationObject());

      m_Reply = dynamic_cast<ISimulatorRequest *> (GetOwnerObject());

    }
};

