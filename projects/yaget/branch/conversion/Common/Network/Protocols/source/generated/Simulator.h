// p:\Yaget\branch\main\Common\Network\Protocols\include\Simulator.h - generated by OIDL Sat Dec 27 04:09:19 2008


#if !defined(SIMULATOR_H)
#define SIMULATOR_H

#include "objectsystem/object.h"
#include "objectsystem/objectproxy.h"
#include "objectsystem/objectreference.h"
#include "Math/Vector.h"
#include "utilities/frame.h"

class ISimulatorObserverRequestRef : public omega::ObjectReference {};

class ISimulatorObserverReplyProxy;

class ISimulatorObserverRequest;
class ISimulatorObserverReply;

class ISimulatorObserverRequest {
public:


  enum { SetObserverInfo_float32_radiusSignature = 0x1b3e33b8 };
  virtual void SetObserverInfo (ISimulatorObserverReplyProxy &reply,
	omega::float32 radius) = 0;

};



class ISimulatorObserverRequestProxy : public omega::ObjectProxy {
private:

  ISimulatorObserverRequest *m_Direct;
  ISimulatorObserverReply *m_Reply;

public:

  ISimulatorObserverRequestProxy(omega::Object::ConnectionID c);

  ISimulatorObserverRequestProxy() : ObjectProxy(), m_Direct(0), m_Reply(0) {
  };

  ISimulatorObserverRequestProxy(const ISimulatorObserverRequestProxy &c) : ObjectProxy(c)
  {
  m_Direct = c.m_Direct;
  m_Reply = c.m_Reply;
  };

  ISimulatorObserverRequestProxy(omega::Object::ConnectionID c, ISimulatorObserverRequest *direct, ISimulatorObserverReply *reply) : ObjectProxy(c)
  {
  m_Direct = direct;
  m_Reply = reply;
  };

  virtual void SetConnection(omega::Object::ConnectionID c);

  bool IsValid() const
  {
    return (IsLocal() || IsDestinationSupportedInterface("(ISimulatorObserverRequest)"));
  };

  omega::uint32 GetInterfaceVersion()
  {
    return GetProtocolVersion("(ISimulatorObserverRequest)");
  };

  void SetObserverInfo ( omega::float32 radius ); // signature 1b3e33b8

};


class ISimulatorObserverReplyRef : public omega::ObjectReference {};

class ISimulatorObserverRequestProxy;

class ISimulatorObserverReply;
class ISimulatorObserverRequest;

class ISimulatorObserverReply {
public:


  enum { Add_uint64_objectIdSignature = 0x7a47f0d };
  virtual void Add (ISimulatorObserverRequestProxy &reply,
	omega::uint64 objectId) = 0;

  enum { Add_uint64_objectId_string_streamNameSignature = 0xfc6e65a0 };
  virtual void Add (ISimulatorObserverRequestProxy &reply,
	omega::uint64 objectId,
	const omega::OString& streamName) = 0;

  enum { Add_uint64_objectId_omega__Frame_frameSignature = 0xc02c2735 };
  virtual void Add (ISimulatorObserverRequestProxy &reply,
	omega::uint64 objectId,
	const omega::Frame& frame) = 0;

  enum { Remove_uint64_objectIdSignature = 0x3cf56655 };
  virtual void Remove (ISimulatorObserverRequestProxy &reply,
	omega::uint64 objectId) = 0;

  enum { ObserverId_uint64_observerIdSignature = 0x19afef56 };
  virtual void ObserverId (ISimulatorObserverRequestProxy &reply,
	omega::uint64 observerId) = 0;

};



class ISimulatorObserverReplyProxy : public omega::ObjectProxy {
private:

  ISimulatorObserverReply *m_Direct;
  ISimulatorObserverRequest *m_Reply;

public:

  ISimulatorObserverReplyProxy(omega::Object::ConnectionID c);

  ISimulatorObserverReplyProxy() : ObjectProxy(), m_Direct(0), m_Reply(0) {
  };

  ISimulatorObserverReplyProxy(const ISimulatorObserverReplyProxy &c) : ObjectProxy(c)
  {
  m_Direct = c.m_Direct;
  m_Reply = c.m_Reply;
  };

  ISimulatorObserverReplyProxy(omega::Object::ConnectionID c, ISimulatorObserverReply *direct, ISimulatorObserverRequest *reply) : ObjectProxy(c)
  {
  m_Direct = direct;
  m_Reply = reply;
  };

  virtual void SetConnection(omega::Object::ConnectionID c);

  bool IsValid() const
  {
    return (IsLocal() || IsDestinationSupportedInterface("(ISimulatorObserverReply)"));
  };

  omega::uint32 GetInterfaceVersion()
  {
    return GetProtocolVersion("(ISimulatorObserverReply)");
  };

  void Add ( omega::uint64 objectId ); // signature 7a47f0d
  void Add ( omega::uint64 objectId, const omega::OString& streamName ); // signature fc6e65a0
  void Add ( omega::uint64 objectId, const omega::Frame& frame ); // signature c02c2735
  void Remove ( omega::uint64 objectId ); // signature 3cf56655
  void ObserverId ( omega::uint64 observerId ); // signature 19afef56

};


class ISimulatorRequestRef : public omega::ObjectReference {};

class ISimulatorReplyProxy;

class ISimulatorRequest;
class ISimulatorReply;

class ISimulatorRequest {
public:


  enum { Add_uint64_objectIdSignature = 0x1716f091 };
  virtual void Add (ISimulatorReplyProxy &reply,
	omega::uint64 objectId) = 0;

  enum { Remove_uint64_objectIdSignature = 0x50e8fde5 };
  virtual void Remove (ISimulatorReplyProxy &reply,
	omega::uint64 objectId) = 0;

};



class ISimulatorRequestProxy : public omega::ObjectProxy {
private:

  ISimulatorRequest *m_Direct;
  ISimulatorReply *m_Reply;

public:

  ISimulatorRequestProxy(omega::Object::ConnectionID c);

  ISimulatorRequestProxy() : ObjectProxy(), m_Direct(0), m_Reply(0) {
  };

  ISimulatorRequestProxy(const ISimulatorRequestProxy &c) : ObjectProxy(c)
  {
  m_Direct = c.m_Direct;
  m_Reply = c.m_Reply;
  };

  ISimulatorRequestProxy(omega::Object::ConnectionID c, ISimulatorRequest *direct, ISimulatorReply *reply) : ObjectProxy(c)
  {
  m_Direct = direct;
  m_Reply = reply;
  };

  virtual void SetConnection(omega::Object::ConnectionID c);

  bool IsValid() const
  {
    return (IsLocal() || IsDestinationSupportedInterface("(ISimulatorRequest)"));
  };

  omega::uint32 GetInterfaceVersion()
  {
    return GetProtocolVersion("(ISimulatorRequest)");
  };

  void Add ( omega::uint64 objectId ); // signature 1716f091
  void Remove ( omega::uint64 objectId ); // signature 50e8fde5

};


class ISimulatorReplyRef : public omega::ObjectReference {};

class ISimulatorRequestProxy;

class ISimulatorReply;
class ISimulatorRequest;

class ISimulatorReply {
public:


};



class ISimulatorReplyProxy : public omega::ObjectProxy {
private:

  ISimulatorReply *m_Direct;
  ISimulatorRequest *m_Reply;

public:

  ISimulatorReplyProxy(omega::Object::ConnectionID c);

  ISimulatorReplyProxy() : ObjectProxy(), m_Direct(0), m_Reply(0) {
  };

  ISimulatorReplyProxy(const ISimulatorReplyProxy &c) : ObjectProxy(c)
  {
  m_Direct = c.m_Direct;
  m_Reply = c.m_Reply;
  };

  ISimulatorReplyProxy(omega::Object::ConnectionID c, ISimulatorReply *direct, ISimulatorRequest *reply) : ObjectProxy(c)
  {
  m_Direct = direct;
  m_Reply = reply;
  };

  virtual void SetConnection(omega::Object::ConnectionID c);

  bool IsValid() const
  {
    return (IsLocal() || IsDestinationSupportedInterface("(ISimulatorReply)"));
  };

  omega::uint32 GetInterfaceVersion()
  {
    return GetProtocolVersion("(ISimulatorReply)");
  };


};

#endif
